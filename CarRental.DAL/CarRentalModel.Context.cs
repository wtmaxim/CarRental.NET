//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarRental.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarRentalEntities : DbContext
    {
        public CarRentalEntities()
            : base("name=CarRentalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Action> Action { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<CarMake> CarMake { get; set; }
        public virtual DbSet<CarModel> CarModel { get; set; }
        public virtual DbSet<CarReport> CarReport { get; set; }
        public virtual DbSet<CategoryCost> CategoryCost { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Cost> Cost { get; set; }
        public virtual DbSet<RequestBooking> RequestBooking { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StopOver> StopOver { get; set; }
        public virtual DbSet<StopOverAddress> StopOverAddress { get; set; }
        public virtual DbSet<StopOverType> StopOverType { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<user_address> user_address { get; set; }
        public virtual DbSet<UserBooking> UserBooking { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<PasswordResetToken> PasswordResetToken { get; set; }
    
        public virtual ObjectResult<Car> usp_Car_Get(string licence_Plate)
        {
            var licence_PlateParameter = licence_Plate != null ?
                new ObjectParameter("licence_Plate", licence_Plate) :
                new ObjectParameter("licence_Plate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_Get", licence_PlateParameter);
        }
    
        public virtual ObjectResult<Car> usp_Car_Get(string licence_Plate, MergeOption mergeOption)
        {
            var licence_PlateParameter = licence_Plate != null ?
                new ObjectParameter("licence_Plate", licence_Plate) :
                new ObjectParameter("licence_Plate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_Get", mergeOption, licence_PlateParameter);
        }
    
        public virtual ObjectResult<Car> usp_Car_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_List");
        }
    
        public virtual ObjectResult<Car> usp_Car_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_List", mergeOption);
        }
    
        public virtual int usp_Car_Insert(Nullable<byte> is_Available, Nullable<int> mileage, string licencePlate, Nullable<int> energy_value, Nullable<byte> is_Active, Nullable<int> id_Company, Nullable<int> id_User, Nullable<int> id_Car_Model)
        {
            var is_AvailableParameter = is_Available.HasValue ?
                new ObjectParameter("is_Available", is_Available) :
                new ObjectParameter("is_Available", typeof(byte));
    
            var mileageParameter = mileage.HasValue ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(int));
    
            var licencePlateParameter = licencePlate != null ?
                new ObjectParameter("licencePlate", licencePlate) :
                new ObjectParameter("licencePlate", typeof(string));
    
            var energy_valueParameter = energy_value.HasValue ?
                new ObjectParameter("energy_value", energy_value) :
                new ObjectParameter("energy_value", typeof(int));
    
            var is_ActiveParameter = is_Active.HasValue ?
                new ObjectParameter("is_Active", is_Active) :
                new ObjectParameter("is_Active", typeof(byte));
    
            var id_CompanyParameter = id_Company.HasValue ?
                new ObjectParameter("id_Company", id_Company) :
                new ObjectParameter("id_Company", typeof(int));
    
            var id_UserParameter = id_User.HasValue ?
                new ObjectParameter("id_User", id_User) :
                new ObjectParameter("id_User", typeof(int));
    
            var id_Car_ModelParameter = id_Car_Model.HasValue ?
                new ObjectParameter("id_Car_Model", id_Car_Model) :
                new ObjectParameter("id_Car_Model", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Car_Insert", is_AvailableParameter, mileageParameter, licencePlateParameter, energy_valueParameter, is_ActiveParameter, id_CompanyParameter, id_UserParameter, id_Car_ModelParameter);
        }
    
        public virtual ObjectResult<Address> usp_Adress_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("usp_Adress_List");
        }
    
        public virtual ObjectResult<Address> usp_Adress_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("usp_Adress_List", mergeOption);
        }
    
        public virtual ObjectResult<CarModel> usp_CarModel_Get_id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("usp_CarModel_Get_id", idParameter);
        }
    
        public virtual ObjectResult<CarModel> usp_CarModel_Get_id(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("usp_CarModel_Get_id", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<CarMake> usp_CarMake_Get_Id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("usp_CarMake_Get_Id", idParameter);
        }
    
        public virtual ObjectResult<CarMake> usp_CarMake_Get_Id(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("usp_CarMake_Get_Id", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Booking> usp_Booking_Get_Id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("usp_Booking_Get_Id", idParameter);
        }
    
        public virtual ObjectResult<Booking> usp_Booking_Get_Id(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("usp_Booking_Get_Id", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Booking> usp_Booking_List_LicencePlate(string licencePlate)
        {
            var licencePlateParameter = licencePlate != null ?
                new ObjectParameter("licencePlate", licencePlate) :
                new ObjectParameter("licencePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("usp_Booking_List_LicencePlate", licencePlateParameter);
        }
    
        public virtual ObjectResult<Booking> usp_Booking_List_LicencePlate(string licencePlate, MergeOption mergeOption)
        {
            var licencePlateParameter = licencePlate != null ?
                new ObjectParameter("licencePlate", licencePlate) :
                new ObjectParameter("licencePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking>("usp_Booking_List_LicencePlate", mergeOption, licencePlateParameter);
        }
    
        public virtual ObjectResult<StopOver> usp_StopOver_List_idBooking(Nullable<int> idBooking)
        {
            var idBookingParameter = idBooking.HasValue ?
                new ObjectParameter("idBooking", idBooking) :
                new ObjectParameter("idBooking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOver>("usp_StopOver_List_idBooking", idBookingParameter);
        }
    
        public virtual ObjectResult<StopOver> usp_StopOver_List_idBooking(Nullable<int> idBooking, MergeOption mergeOption)
        {
            var idBookingParameter = idBooking.HasValue ?
                new ObjectParameter("idBooking", idBooking) :
                new ObjectParameter("idBooking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOver>("usp_StopOver_List_idBooking", mergeOption, idBookingParameter);
        }
    
        public virtual ObjectResult<StopOverAddress> usp_StopOverAddress_Get_idStopOver(Nullable<int> idStopOver)
        {
            var idStopOverParameter = idStopOver.HasValue ?
                new ObjectParameter("idStopOver", idStopOver) :
                new ObjectParameter("idStopOver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOverAddress>("usp_StopOverAddress_Get_idStopOver", idStopOverParameter);
        }
    
        public virtual ObjectResult<StopOverAddress> usp_StopOverAddress_Get_idStopOver(Nullable<int> idStopOver, MergeOption mergeOption)
        {
            var idStopOverParameter = idStopOver.HasValue ?
                new ObjectParameter("idStopOver", idStopOver) :
                new ObjectParameter("idStopOver", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOverAddress>("usp_StopOverAddress_Get_idStopOver", mergeOption, idStopOverParameter);
        }
    
        public virtual ObjectResult<StopOverType> usp_StopOverType_Get_id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOverType>("usp_StopOverType_Get_id", idParameter);
        }
    
        public virtual ObjectResult<StopOverType> usp_StopOverType_Get_id(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopOverType>("usp_StopOverType_Get_id", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<CarMake> usp_CarMake_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("usp_CarMake_List");
        }
    
        public virtual ObjectResult<CarMake> usp_CarMake_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarMake>("usp_CarMake_List", mergeOption);
        }
    
        public virtual ObjectResult<CarModel> usp_CarModel_List_idMake(Nullable<int> idMake)
        {
            var idMakeParameter = idMake.HasValue ?
                new ObjectParameter("idMake", idMake) :
                new ObjectParameter("idMake", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("usp_CarModel_List_idMake", idMakeParameter);
        }
    
        public virtual ObjectResult<CarModel> usp_CarModel_List_idMake(Nullable<int> idMake, MergeOption mergeOption)
        {
            var idMakeParameter = idMake.HasValue ?
                new ObjectParameter("idMake", idMake) :
                new ObjectParameter("idMake", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarModel>("usp_CarModel_List_idMake", mergeOption, idMakeParameter);
        }
    
        public virtual ObjectResult<Event> usp_Event_List(string licencePlate)
        {
            var licencePlateParameter = licencePlate != null ?
                new ObjectParameter("licencePlate", licencePlate) :
                new ObjectParameter("licencePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Event>("usp_Event_List", licencePlateParameter);
        }
    
        public virtual ObjectResult<Event> usp_Event_List(string licencePlate, MergeOption mergeOption)
        {
            var licencePlateParameter = licencePlate != null ?
                new ObjectParameter("licencePlate", licencePlate) :
                new ObjectParameter("licencePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Event>("usp_Event_List", mergeOption, licencePlateParameter);
        }
    
        public virtual ObjectResult<Car> usp_Car_List_Search(string searchWord)
        {
            var searchWordParameter = searchWord != null ?
                new ObjectParameter("searchWord", searchWord) :
                new ObjectParameter("searchWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_List_Search", searchWordParameter);
        }
    
        public virtual ObjectResult<Car> usp_Car_List_Search(string searchWord, MergeOption mergeOption)
        {
            var searchWordParameter = searchWord != null ?
                new ObjectParameter("searchWord", searchWord) :
                new ObjectParameter("searchWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Car>("usp_Car_List_Search", mergeOption, searchWordParameter);
        }
    
        public virtual ObjectResult<RequestBooking> usp_RequestBooking_Get_IdBooking(Nullable<int> idBooking)
        {
            var idBookingParameter = idBooking.HasValue ?
                new ObjectParameter("IdBooking", idBooking) :
                new ObjectParameter("IdBooking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestBooking>("usp_RequestBooking_Get_IdBooking", idBookingParameter);
        }
    
        public virtual ObjectResult<RequestBooking> usp_RequestBooking_Get_IdBooking(Nullable<int> idBooking, MergeOption mergeOption)
        {
            var idBookingParameter = idBooking.HasValue ?
                new ObjectParameter("IdBooking", idBooking) :
                new ObjectParameter("IdBooking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RequestBooking>("usp_RequestBooking_Get_IdBooking", mergeOption, idBookingParameter);
        }
    
        public virtual ObjectResult<PasswordResetToken> usp_PasswordResetToken_get(string token)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PasswordResetToken>("usp_PasswordResetToken_get", tokenParameter);
        }
    
        public virtual ObjectResult<PasswordResetToken> usp_PasswordResetToken_get(string token, MergeOption mergeOption)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PasswordResetToken>("usp_PasswordResetToken_get", mergeOption, tokenParameter);
        }
    
        public virtual int usp_PasswordResetToken_Insert(string token, Nullable<System.DateTime> expiry_date, Nullable<int> user_Id)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var expiry_dateParameter = expiry_date.HasValue ?
                new ObjectParameter("expiry_date", expiry_date) :
                new ObjectParameter("expiry_date", typeof(System.DateTime));
    
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("user_Id", user_Id) :
                new ObjectParameter("user_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PasswordResetToken_Insert", tokenParameter, expiry_dateParameter, user_IdParameter);
        }
    
        public virtual ObjectResult<User> usp_User_GET(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_GET", idParameter);
        }
    
        public virtual ObjectResult<User> usp_User_GET(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_GET", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<User> usp_User_GET_By_EMail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_GET_By_EMail", emailParameter);
        }
    
        public virtual ObjectResult<User> usp_User_GET_By_EMail(string email, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_GET_By_EMail", mergeOption, emailParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_By_Email_And_Password(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_By_Email_And_Password", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_By_Email_And_Password(string email, string password, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_By_Email_And_Password", mergeOption, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<User> usp_User_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List");
        }
    
        public virtual ObjectResult<User> usp_User_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List", mergeOption);
        }
    
        public virtual int usp_User_Update_Password(string password, string email)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Update_Password", passwordParameter, emailParameter);
        }
    
        public virtual int usp_PasswordResetToken_DELETE_BY_ID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PasswordResetToken_DELETE_BY_ID", idParameter);
        }
    
        public virtual ObjectResult<Company> usp_Company_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company>("usp_Company_List");
        }
    
        public virtual ObjectResult<Company> usp_Company_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company>("usp_Company_List", mergeOption);
        }
    
        public virtual ObjectResult<Role> usp_Role_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role>("usp_Role_List");
        }
    
        public virtual ObjectResult<Role> usp_Role_List(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role>("usp_Role_List", mergeOption);
        }
    
        public virtual int usp_User_Archive(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Archive", idParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_Fistname_Lastname_Email(string searchValue)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_Fistname_Lastname_Email", searchValueParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_Fistname_Lastname_Email(string searchValue, MergeOption mergeOption)
        {
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_Fistname_Lastname_Email", mergeOption, searchValueParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_Id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_Id", idParameter);
        }
    
        public virtual ObjectResult<User> usp_User_Get_Id(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_Get_Id", mergeOption, idParameter);
        }
    
        public virtual int usp_User_Insert(string firstname, string lastname, string email, string password, Nullable<byte> isActive, string job, string note, string phoneNumber, Nullable<byte> isAddressPrivate, Nullable<int> idCompany)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(byte));
    
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var isAddressPrivateParameter = isAddressPrivate.HasValue ?
                new ObjectParameter("isAddressPrivate", isAddressPrivate) :
                new ObjectParameter("isAddressPrivate", typeof(byte));
    
            var idCompanyParameter = idCompany.HasValue ?
                new ObjectParameter("idCompany", idCompany) :
                new ObjectParameter("idCompany", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Insert", firstnameParameter, lastnameParameter, emailParameter, passwordParameter, isActiveParameter, jobParameter, noteParameter, phoneNumberParameter, isAddressPrivateParameter, idCompanyParameter);
        }
    
        public virtual int usp_User_Update(Nullable<int> id, string firstname, string lastname, string email, string password, Nullable<byte> isActive, string job, string note, string phoneNumber, Nullable<byte> isAddressPrivate, Nullable<int> idCompany, Nullable<int> idRole)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(byte));
    
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var isAddressPrivateParameter = isAddressPrivate.HasValue ?
                new ObjectParameter("isAddressPrivate", isAddressPrivate) :
                new ObjectParameter("isAddressPrivate", typeof(byte));
    
            var idCompanyParameter = idCompany.HasValue ?
                new ObjectParameter("idCompany", idCompany) :
                new ObjectParameter("idCompany", typeof(int));
    
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("idRole", idRole) :
                new ObjectParameter("idRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Update", idParameter, firstnameParameter, lastnameParameter, emailParameter, passwordParameter, isActiveParameter, jobParameter, noteParameter, phoneNumberParameter, isAddressPrivateParameter, idCompanyParameter, idRoleParameter);
        }
    
        public virtual ObjectResult<usp_User_GET1_Result> usp_User_GET1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_GET1_Result>("usp_User_GET1", idParameter);
        }
    
        public virtual int usp_User_Insert_Or_Update(string firstname, string lastname, string email, string password, Nullable<byte> isActive, string job, string note, string phoneNumber, Nullable<byte> isAddressPrivate, Nullable<int> idCompany)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(byte));
    
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var isAddressPrivateParameter = isAddressPrivate.HasValue ?
                new ObjectParameter("isAddressPrivate", isAddressPrivate) :
                new ObjectParameter("isAddressPrivate", typeof(byte));
    
            var idCompanyParameter = idCompany.HasValue ?
                new ObjectParameter("idCompany", idCompany) :
                new ObjectParameter("idCompany", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Insert_Or_Update", firstnameParameter, lastnameParameter, emailParameter, passwordParameter, isActiveParameter, jobParameter, noteParameter, phoneNumberParameter, isAddressPrivateParameter, idCompanyParameter);
        }
    
        public virtual ObjectResult<User> usp_User_List_Active()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_Active");
        }
    
        public virtual ObjectResult<User> usp_User_List_Active(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_Active", mergeOption);
        }
    
        public virtual ObjectResult<User> usp_User_List_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_All");
        }
    
        public virtual ObjectResult<User> usp_User_List_All(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_All", mergeOption);
        }
    
        public virtual ObjectResult<User> usp_User_List_Unactive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_Unactive");
        }
    
        public virtual ObjectResult<User> usp_User_List_Unactive(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_User_List_Unactive", mergeOption);
        }
    
        public virtual int usp_User_Unarchive(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Unarchive", idParameter);
        }
    
        public virtual ObjectResult<Action> usp_Action_List_By_User(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Action>("usp_Action_List_By_User", emailParameter);
        }
    
        public virtual ObjectResult<Action> usp_Action_List_By_User(string email, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Action>("usp_Action_List_By_User", mergeOption, emailParameter);
        }
    
        public virtual ObjectResult<Role> usp_Role_GET(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role>("usp_Role_GET", roleNameParameter);
        }
    
        public virtual ObjectResult<Role> usp_Role_GET(string roleName, MergeOption mergeOption)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Role>("usp_Role_GET", mergeOption, roleNameParameter);
        }
    
        public virtual ObjectResult<usp_Role_Get_By_ID_Result> usp_Role_Get_By_ID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Role_Get_By_ID_Result>("usp_Role_Get_By_ID", idParameter);
        }
    
        public virtual ObjectResult<User> usp_Role_GET_List_Users_BY_Libelle(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_Role_GET_List_Users_BY_Libelle", roleNameParameter);
        }
    
        public virtual ObjectResult<User> usp_Role_GET_List_Users_BY_Libelle(string roleName, MergeOption mergeOption)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_Role_GET_List_Users_BY_Libelle", mergeOption, roleNameParameter);
        }
    
        public virtual int usp_Role_Insert(string libelle)
        {
            var libelleParameter = libelle != null ?
                new ObjectParameter("libelle", libelle) :
                new ObjectParameter("libelle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Role_Insert", libelleParameter);
        }
    
        public virtual ObjectResult<usp_User_Get_By_Email_And_Password1_Result> usp_User_Get_By_Email_And_Password1(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_Get_By_Email_And_Password1_Result>("usp_User_Get_By_Email_And_Password1", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<usp_User_GET_List_Roles_Result> usp_User_GET_List_Roles(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_User_GET_List_Roles_Result>("usp_User_GET_List_Roles", emailParameter);
        }
    
        public virtual ObjectResult<User> usp_UserRole_GET_USER_IN_ROLE(string email, string roleName)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_UserRole_GET_USER_IN_ROLE", emailParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<User> usp_UserRole_GET_USER_IN_ROLE(string email, string roleName, MergeOption mergeOption)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("usp_UserRole_GET_USER_IN_ROLE", mergeOption, emailParameter, roleNameParameter);
        }
    
        public virtual int usp_UserRole_INSERT(Nullable<int> userID, Nullable<int> roleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UserRole_INSERT", userIDParameter, roleIDParameter);
        }
    }
}
