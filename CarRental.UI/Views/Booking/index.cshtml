@model CarRental.UI.ViewsModels.Booking.BookingIndexViewsModel

@{
    ViewBag.Title = "index";
}

<section class="content-header">
    <h2>Mes réservations</h2>

</section>
<section class="content">
    <div class="box box-primary collapsed-box">
        <div class="box-header with-border">
            <h3 class="box-title">Faire une réservation</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-plus"></i>
                </button>
            </div>
        </div>

        <div class="box-body">
            <div class="row">
                <div class="col-sm-6">
                    <h4 class="text-light-blue">General</h4>

                    <!-- driver column -->
                    <div class="form-group">
                        @Html.DropDownListFor(m => m.userIdDriver, Model.Users, new { id = "SelectedDriverId", @class = "form-control select2" })
                    </div>

                    <div class="form-group">
                        <!--personnal vehicle checkbox -->
                        <div class="checkbox">
                            <label class="col-sm-6">
                                <input type="checkbox" id="checkBoxIsPersonalCarAvailable">
                                Véhicule personnel disponible
                            </label>
                            <label class="col-sm-6">
                                <input type="checkbox" id="checkBoxDriverChange">
                                Changement de conducteur
                            </label>
                        </div>
                        <br>
                    </div>

                    <div class="form-group" id="driverChange">
                        @Html.DropDownListFor(m => m.userIdDriver2, Model.Users, new { id = "DropDownListDriverChange", @class = "form-control select2" })
                    </div>

                    <div class="form-group">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" id="checkBoxCoVoiturage">
                                Co-voiturage non accepté
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.ListBoxFor(m => m.userIdPassagers, Model.Users, new { id = "DropDownListPassagers", @class = "form-control select2" })
                    </div>

                    <div class="form-group">
                        <select class="form-control select2" multiple="multiple" data-placeholder="Catégorie du déplacement" style="width: 100%;">
                            <option>Technique</option>
                            <option>Formation</option>
                            <option>Evenement</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <input type="text" class="form-control" id="reason" placeholder="Raison du déplacement">
                        <div class="callout callout-danger" id="error-reason">La raison du déplacement est obligatoire</div>
                    </div>

                </div>
                <div class="col-sm-6">
                    <h4 class="text-light-blue">Point de départ</h4>

                    <div class="form-group col-sm-12">
                        <div class="input-group">
                            <div class='input-group date' id='datetimepicker1'>
                                <input type='text' id="Departure_Date" class="form-control" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </div>
                        <div class="callout callout-danger" id="error-Departure_Date">La date de départ est obligatoire</div>
                    </div>

                    <p id="link"></p>

                    <div class="row">
                        <div class="col-xs-6">
                            <button id="buttonAddressAutoDeparture" type="button" class="btn btn-block btn-default">
                                Adresse prédéfinie
                            </button>
                        </div>
                        <div class="col-xs-6">
                            <button id="buttonAddressManualDeparture" type="button" class="btn btn-block btn-default link">
                                Adresse manuelle
                            </button>
                        </div>
                    </div>
                    <br>

                    <div class="form-group" id="DropDownListAddressDeparture">
                        @Html.DropDownListFor(m => m.AddressDepartureId, Model.Addresses, "Adresse prédéfinie", new { @class = "form-control select2" })
                        <div class="callout callout-danger" id="error-DropDownListAddressDeparture">L'addresse de départ est obligatoire</div>

                    </div>

                    <div class="form-group" id="manAddressDepTxt">
                        <input id="InputAddressDeparture" type="text" class="form-control">
                    </div>

                    <br>
                    <h4 class="text-light-blue">Point d'arrivée</h4>

                    <div class="noPadding form-group col-sm-12">
                        <div class='input-group date' id='datetimepicker2'>
                            <input type='text' id="Arrival_Date" class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <div class="callout callout-danger" id="error-Arrival_Date">La date de retour est obligatoire</div>

                    </div>

                    <div class="row form-group">
                        <div class="col-xs-6">
                            <button id="buttonAddressAutoArrival" type="button" class="btn btn-block btn-default">
                                Adresse prédéfinie
                            </button>
                        </div>
                        <div class="col-xs-6">
                            <button id="buttonAddressManualArrival" type="button" class="btn btn-block btn-default link">
                                Adresse manuelle
                            </button>
                        </div>
                    </div>

                    <div class="form-group" id="DropDownListAddressArrival">
                        @Html.DropDownListFor(m => m.AddressArrivalId, Model.Addresses, "Adresse prédéfinie", new { @class = "form-control select2" })
                        <div class="callout callout-danger" id="error-DropDownListAddressArrival">L'addresse de retour est obligatoire</div>

                    </div>

                    <div class="form-group" id="InputAddressArrival">
                        <input id="InputAddressArrival" type="text" class="form-control">
                    </div>

                </div>
            </div>

            <div class="box-footer text-center">
                <a class="btn btn-app">
                    <i class="fa fa-mail-reply"></i> Annuler
                </a>
                <a class="btn btn-app" href="@Url.Action("Insert", "RequestBooking")">
                    <i class="fa fa-edit"></i> Plus d'options
                </a>
                <a class="btn btn-app bg-olive">
                    <i class="fa fa-save" id="DemanderReservation"></i>Enregistrer
                </a>
            </div>
        </div>
    </div>

    <div id="tempaltediv">
        @Html.Action("PartialListBooking", "Booking")
    </div>


</section>


<div style="display: none" id="template" class="box ">
    <div class="box-header with-border">
        <strong><i class="fa fa-arrow-right margin-r-5"></i></strong> &nbsp;
        <span class="label label-danger" id="statusLibelle"></span>
        <p class="text-muted" id="stopOverDatesAddressesLocality"></p>
        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-plus"></i>
            </button>
        </div>
    </div>
    <div class="box-body">

        <div class="col-sm-6">
            <div class="box box-solid">
                <div class="box-header with-border">

                    <i class="fa fa-arrow-right"></i>
                    <h3 class="box-title">Départ</h3>
                </div>
                <div class="box-body">
                    <dl class="dl-horizontal">
                        <dt>Chauffeur</dt>
                        <dd>
                            <a href="#" class="profile" id="driver1Profil"></a>
                        </dd>
                        <dt>Passagers</dt>
                        <dd id="ddPasagers">
                        </dd>
                        <dt>Adresse</dt>
                        <dd id="ddAddressDeparture">
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-sm-6">
            <div class="box box-solid">
                <div class="box-header with-border">
                    <i class="fa fa-arrow-left"></i>

                    <h3 class="box-title">Arrivée</h3>
                </div>
                <div class="box-body">
                    <dl class="dl-horizontal">
                        <dt>Chauffeur</dt>
                        <dd>
                            <a href="#" class="profile" id="driver2Profil"></a>
                        </dd>
                        <dt>Passagers</dt>
                        <dd id="ddPasagers">
                        </dd>
                        <dt>Adresse</dt>
                        <dd id="ddAddressArrival">
                            
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-sm-12">
            <div class="box box-solid">
                <div class="box-header with-border">
                    <i class="fa fa-arrows-h"></i>
                    <h3 class="box-title">General</h3>
                </div>
                <div class="box-body">
                    <dl class="dl-horizontal">
                        <dt>Raison du déplacement</dt>
                        <dd>Devfest de Nantes 2019</dd>
                        <dt>Catégorie</dt>
                        <dd>Evenement</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        var isValidForm = false;
        var i = 0;
        $(function () {

            toogleClickAutoAddressDeparture();
            toogleClickAutoAddressArrival();

            $('#datetimepicker1').datetimepicker({
                locale: 'fr'
            });

            $('#datetimepicker2').datetimepicker({
                locale: 'fr'
            });

            handleStatusChanged();

            handleErrorMessage();

            $("#DemanderReservation").on('click', function () {
                validationForm();
                addRequestBooking();
            });

            $(".select2").select2({
                theme: "bootstrap"
            });
        });

        function handleErrorMessage() {
            $("#error-reason").hide();
            $("#error-DropDownListAddressArrival").hide();
            $("#error-DropDownListAddressDeparture").hide();
            $("#error-Departure_Date").hide();
            $("#error-Arrival_Date").hide();
        }

        function validationForm() {
            var errorReason = 1;
            var errorDropDownListAddressArrival = 1;
            var errorDropDownListAddressDeparture = 1;
            var errorDepartureDate = 1;
            var errorArrivalDate = 1;

            if ($("#reason").val() == "") {
                errorReason = 1;
                $("#error-reason").show();
            } else {
                errorReason = 0;
                $("#error-reason").hide();
            }

            if ($("#DropDownListAddressArrival option:selected").val() == "") {
                errorDropDownListAddressArrival = 1;
                $("#error-DropDownListAddressArrival").show();
            } else {
                errorDropDownListAddressArrival = 0;
                $("#error-DropDownListAddressArrival").hide();
            }

            if ($("#DropDownListAddressDeparture option:selected").val() == "") {
                errorDropDownListAddressDeparture = 1;
                $("#error-DropDownListAddressDeparture").show();
            } else {
                errorDropDownListAddressDeparture = 0;
                $("#error-DropDownListAddressDeparture").hide();
            }

            if ($("#Departure_Date").val() == "") {
                errorDepartureDate = 1;
                $("#error-Departure_Date").show();
            } else {
                errorDepartureDate = 0;
                $("#error-Departure_Date").hide();
            }

            if ($("#Arrival_Date").val() == "") {
                errorArrivalDate = 1;
                $("#error-Arrival_Date").show();
            } else {
                errorArrivalDate = 0;
                $("#error-Arrival_Date").hide();
            }

            if (errorReason == 1 || errorDropDownListAddressArrival == 1 || errorDropDownListAddressDeparture == 1 || errorDepartureDate == 1 || errorArrivalDate == 1) {
                isValidForm = false;
            } else {
                isValidForm = true;
            }

        }

        function getValues() {

            var requestBooking = {};
            var stopOver = {};
            var driver = $("#SelectedDriverId > option:selected").attr("value");

            if ($("#DropDownListDriverChange").is(":disabled")) {
                driver2 = driver;
            } else {
                driver2 = $("#DropDownListDriverChange > option:selected").attr("value");
            }

            requestBooking.reason = $("#reason").val();
            requestBooking.isPersonalCarAvailable = $("#checkBoxIsPersonalCarAvailable").is(":checked");

            stopOver.Departure_Date = new Date($('#Departure_Date').val());
            stopOver.Arrival_Date = new Date($('#Arrival_Date').val());

            var addressDeparture = $("#DropDownListAddressDeparture option:selected").val();
            var addressArrival = $("#DropDownListAddressArrival option:selected").val();
            var passagers = $('#DropDownListPassagers').val();

            return { requestBooking: requestBooking, passagers: passagers, driver: driver, driver2: driver2, stopOver: stopOver, addressDeparture: addressDeparture, addressArrival: addressArrival };
        }

        function getNewStopOver() {

        }

         function getDateFromAspNetFormat(date){
            const re = /-?\d+/;
            const m = re.exec(date);
            return parseInt(m[0], 10);
        }

        function addRequestBooking() {

            if (isValidForm == true) {
                var data = getValues();

                console.log("valideFOrm " + isValidForm);

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddRequestBooking", "RequestBooking")',
                    data: '{requestBooking: ' + JSON.stringify(data.requestBooking) + ', _passagers: ' + JSON.stringify(data.passagers) + ', driver: ' + JSON.stringify(data.driver) + ', driver2: ' + JSON.stringify(data.driver2) + ', stopOver: ' + JSON.stringify(data.stopOver) + ', addressDeparture: ' + JSON.stringify(data.addressDeparture) + ', addressArrival: ' + JSON.stringify(data.addressArrival)+'}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {

                        console.log(response);

                        var dateDeparture = new Date(getDateFromAspNetFormat(response.stopOver.Departure_Date));
                        var dateArrival = new Date(getDateFromAspNetFormat(response.stopOver.Arrival_Date));

                        i = i + 1;

                        $tmc = $("#template").clone().prop('id', 'template-' + i).removeAttr('style');
                        $("#statusLibelle", $tmc).text(response.status.Libelle);
                        $("#stopOverDatesAddressesLocality", $tmc).text(moment(dateDeparture).format("DD/MM/YYYY") + " au " + moment(dateArrival).format("DD/MM/YYYY") + " - " + response.addressAller.Locality + " à " + response.addressRetour.Locality);
                        $("#driver1Profil", $tmc).text(response.driverAller.Firstname + " " + response.driverAller.Lastname);
                        $("#driver2Profil", $tmc).text(response.driverRetour.Firstname + " " + response.driverRetour.Lastname);

                        
                        for (var i = 0; i < response.passagers.length; i++) {
                            $("#ddPasagers", $tmc).append("<a href='#' class='profile'>" + response.passagers[i].Firstname + " " + response.passagers[i].Lastname+"</a>");
                        }

                        $("#ddAddressArrival", $tmc).append("<a href='#'>" + response.addressRetour.Name + ", " + response.addressRetour.Route + " " + response.addressRetour.Postal_Code + " " + response.addressRetour.Locality);
                        $("#ddAddressDeparture", $tmc).append("<a href='#'>" + response.addressAller.Name + ", " + response.addressAller.Route + " " + response.addressAller.Postal_Code + " " + response.addressAller.Locality);

                        $tmc.appendTo("#tempaltediv");
                    },
                    failure: function (response) {
                        console.log(response.responseText);
                    },
                    error: function (response) {
                        console.log(response.responseText);
                    }
                });
            }


        }

        $(document)
            .on('click', "#buttonAddressAutoDeparture", toogleClickAutoAddressDeparture)
            .on('click', "#buttonAddressManualDeparture", toogleClickManualAddressDeparture)
            .on('click', "#buttonAddressAutoArrival", toogleClickAutoAddressArrival)
            .on('click', "#buttonAddressManualArrival", toogleClickManualAddressArrival)

        function toogleClickAutoAddressDeparture() {
            $("#InputAddressDeparture").hide();
            $("#DropDownListAddressDeparture").show();
            $("#buttonAddressAutoDeparture").prop('disabled', true);
            $("#buttonAddressManualDeparture").prop('disabled', false);
        }

        function toogleClickManualAddressDeparture() {
            $("#DropDownListAddressDeparture").hide();
            $("#InputAddressDeparture").show();
            $("#buttonAddressAutoDeparture").prop('disabled', false);
            $("#buttonAddressManualDeparture").prop('disabled', true);
        }

        function toogleClickAutoAddressArrival() {
            $("#InputAddressArrival").hide();
            $("#DropDownListAddressArrival").show();
            $("#buttonAddressAutoArrival").prop('disabled', true);
            $("#buttonAddressManualArrival").prop('disabled', false);
        }

        function toogleClickManualAddressArrival() {
            $("#DropDownListAddressArrival").hide();
            $("#InputAddressArrival").show();
            $("#buttonAddressAutoArrival").prop('disabled', false);
            $("#buttonAddressManualArrival").prop('disabled', true);
        }

        function handleStatusChanged() {
            $('#checkBoxDriverChange').on('change', function () {
                toggleChangeConducteur();
            });
            $('#checkBoxCoVoiturage').on('change', function () {
                toggleChangeCoVoiturage();
            });
        }

        function toggleChangeCoVoiturage() {
            if ($('#checkBoxCoVoiturage').is(':checked')) {
                $('#DropDownListPassagers').attr('disabled', true);
            } else {
                $('#DropDownListPassagers').removeAttr('disabled');
            }
        }

        function toggleChangeConducteur() {
            if ($('#checkBoxDriverChange').is(':checked')) {
                $('#DropDownListDriverChange').attr('disabled', true);
            } else {
                $('#DropDownListDriverChange').removeAttr('disabled');
            }
        }
    </script>
}